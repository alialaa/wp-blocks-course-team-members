{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;AAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS,0DAAmB;AAC5B;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS,0DAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,0CAA0C,+CAAQ;AAClD,mBAAmB,kDAAW;AAC9B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEmD;AACnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtD8H;AAC5D;AACoG;AACrF;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG;AAC1C,GAAG;;AAEH;AACA;AACA,+BAA+B,IAAI,gCAAgC,OAAO;AAC1E;;AAEA,6BAA6B,IAAI;AACjC,GAAG;;AAEH;AACA;AACA,+BAA+B,IAAI,kCAAkC,OAAO;AAC5E;;AAEA,6BAA6B,IAAI;AACjC,GAAG;;AAEH;AACA,qDAAqD,IAAI;AACzD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wBAAwB;;AAEzB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,6BAA6B,oDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe;AACf,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,qBAAqB;AACrB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,iBAAiB;AACjB,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA,SAAS;AACT,iBAAiB;AACjB,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,oDAAa;AACpD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB,iDAAU;AACjC,+BAA+B,6CAAM;AACrC,EAAE,gDAAS;AACX;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,IAAI,EAAE,uEAAe;AACrB,uBAAuB,+DAAW;AAClC,gCAAgC,+CAAQ;AACxC,EAAE,gDAAS;AACX;AACA,GAAG;AACH,gBAAgB,8CAAO;AACvB;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;;AAEA,GAAG;AACH,mBAAmB,uDAAY,CAAC,0DAAmB,CAAC,uDAAc,QAAQ,0DAAmB,CAAC,8DAAU;AACxG;AACA;AACA,GAAG,GAAG,0DAAmB,CAAC,8DAAU;AACpC;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,uEAAmB;AAC9C;AACA;AACA;AACA;AACA,YAAY,kBAAkB,IAAI,kBAAkB;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,KAAK;AACV,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO,yDAAS;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,yDAAS;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,uDAAG;AACd,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,KAAK,YAAY,KAAK,cAAc,KAAK,eAAe,KAAK;AAC1E;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC,kDAAkD;;AAEnD;;AAEA;AACA;AACA;AACA,CAAC,wCAAwC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2DAA2D,+DAAW;AACtE,sBAAsB,6CAAM;AAC5B;AACA;AACA,GAAG;AACH,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA,GAAG;AACH,0BAA0B,6CAAM;AAChC,6BAA6B,6CAAM;AACnC,qBAAqB,kDAAW;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,oCAAoC,8CAAO;AAC3C,EAAE,gDAAS;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,+DAAW;AACpB;;AAEA;AACA;AACA,MAAM;AACN;AACA;;;AAGA;AACA,GAAG;AACH;;AAEA;AACA,SAAS,8CAAO;AAChB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA,kBAAkB,6CAAM;AACxB,EAAE,6EAAyB;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;;AAE/C;;AAEA;AACA;AACA,CAAC,gDAAgD;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0DAA0D,+CAAQ;AAClE;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA,wBAAwB,6CAAM;AAC9B,2BAA2B,kDAAW;AACtC,oCAAoC,6CAAM;AAC1C;AACA,wBAAwB,+DAAW;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA,EAAE,gDAAS;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oDAAoD,+CAAQ;AAC5D,uBAAuB,6CAAM,YAAY;;AAEzC,uBAAuB,kDAAW;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH,EAAE,gDAAS;AACX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,SAAS,8CAAO;AAChB;AACA,qGAAqG,uDAAG;AACxG;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA,uBAAuB,6CAAM;AAC7B,oBAAoB,+DAAW;AAC/B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA,GAAG;AACH;AACA;;AAEA;AACA,EAAE,gDAAS;AACX,SAAS,yDAAS;AAClB;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,SAAS,8CAAO;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,KAAK,IAAI;AACT,GAAG;AACH;;AAEA;AACA;AACA;AACA,0BAA0B,6CAAM;AAChC,SAAS,+DAAW;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,6CAAM;AACnC,WAAW,+DAAW;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,4BAA4B,8DAAU;AACtC;AACA,SAAS,8CAAO;AAChB;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,SAAS,8CAAO;AAChB;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,SAAS,8CAAO;AAChB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA,eAAe;AACf;AACA;;AAEA;AACA,eAAe;AACf;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,mCAAmC,4DAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,+BAA+B,uDAAG;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;;AAEN;AACA,6BAA6B;;AAE7B;AACA;AACA,OAAO,GAAG;;AAEV,kCAAkC;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA,wBAAwB,uEAAmB;AAC3C,kBAAkB,4DAAQ;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,oDAAa,GAAG;AAC5D;AACA;AACA,CAAC;AACD,gCAAgC,2CAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA,gBAAgB,iDAAU;AAC1B;AACA,0CAA0C,+CAAQ;AAClD;AACA;AACA,GAAG;AACH,sCAAsC,+CAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI;AACJ;AACA,sBAAsB,6CAAM;AAC5B;AACA;AACA,GAAG;AACH,iBAAiB,8CAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,GAAG;AACH,oBAAoB,6CAAM;AAC1B,0CAA0C,+CAAQ;AAClD,8CAA8C,+CAAQ;AACtD,sBAAsB,6CAAM;AAC5B,iCAAiC,+DAAW;AAC5C,qCAAqC,8CAAO;AAC5C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA,iDAAiD,uEAAmB;AACpE;AACA;AACA,mCAAmC,6CAAM;AACzC;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG;;AAEN,gHAAgH;AAChH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,qDAAqD,uDAAG;AACxD;AACA,kCAAkC,uDAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,0BAA0B,+CAAQ;AAClC;AACA,4BAA4B,kDAAW;AACvC;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAuB;AAC/B;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA,KAAK;AACL,IAAI,kEAAuB;AAC3B;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kEAAuB;AAC/B;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,4CAA4C,kDAAW;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE,6EAAyB;AAC3B;AACA,GAAG;AACH;AACA,EAAE,gDAAS;AACX;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,IAAI,kEAAuB;AAC3B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH;AACA,EAAE,6EAAyB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,oBAAoB;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,0DAAmB;AAC5B;AACA,GAAG,EAAE,0DAAmB;AACxB;AACA,GAAG,EAAE,0DAAmB;AACxB;AACA,GAAG,cAAc,0DAAmB;AACpC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED,iCAAiC,oDAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,cAAc,+DAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,iDAAU;AAChB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,oBAAoB,iDAAU;AAC9B,6BAA6B,8DAAU;AACvC;AACA;AACA,EAAE,gDAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,6BAA6B,8CAAO;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,iDAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,cAAc,+DAAW;AACzB;AACA;AACA;AACA;AACA,IAAI,EAAE,iDAAU;AAChB,eAAe,6CAAM;AACrB,gCAAgC,8DAAU;AAC1C;AACA,EAAE,6EAAyB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,EAAE,gDAAS;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4DAA4D,+CAAQ;AACpE,EAAE,gDAAS;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sEAAsB;AACzD;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,2CAA2C,kBAAkB;AAC7D;;AAEA;AACA,yBAAyB,sEAAsB;AAC/C,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH,EAAE,6EAAyB;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,0BAA0B,+DAAW;AACrC;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAsB;AACrC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6BAA6B,6CAAM;AACnC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,uBAAuB,6CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE,gDAAS;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,SAAS,0DAAmB,mBAAmB;AAC/C;AACA,GAAG;AACH,CAAC;;AAEye;AAC1e;;;;;;;;;;;;;;;;;;;;;;AC/xFuG;;AAEvG;AACA;AACA;AACA,GAAG,QAAQ;AACX;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,CAAC;AACD,WAAW;AACX;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;AACD,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,2CAA2C,gEAAY,oBAAoB,kFAA8B;AACzG,iCAAiC,uEAAmB;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEuL;AACvL;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGgF;AACoF;AAClE;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,0DAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,4DAAa;AACnB,sBAAsB,+DAAW;AACjC;AACA,gBAAgB,8CAAO;AACvB;AACA,sBAAsB,6CAAM;AAC5B;AACA;AACA;AACA,2BAA2B,6CAAM;AACjC;AACA;AACA;AACA,EAAE,6EAAyB;AAC3B;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,0DAAmB;AAC5B;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uEAAuB;AAC/D;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kDAAkD,+CAAQ;AAC1D,wBAAwB,6CAAM;AAC9B,EAAE,6EAAyB;AAC3B;AACA;;AAEA;AACA,wBAAwB,oEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,iDAAU;AAChB;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI,EAAE,2DAAY;AAClB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,2DAAY;AAClB;AACA;AACA,kBAAkB;AAClB;AACA,KAAK;AACL;AACA,GAAG;AACH,qBAAqB,mEAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,oBAAoB,6CAAM;AAC1B;AACA,uBAAuB,6CAAM;AAC7B,8BAA8B,6CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,gDAAS;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aA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","sources":["webpack://boilerplate/./node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js","webpack://boilerplate/./node_modules/@dnd-kit/core/dist/core.esm.js","webpack://boilerplate/./node_modules/@dnd-kit/modifiers/dist/modifiers.esm.js","webpack://boilerplate/./node_modules/@dnd-kit/sortable/dist/sortable.esm.js","webpack://boilerplate/./node_modules/@dnd-kit/utilities/dist/utilities.esm.js","webpack://boilerplate/./src/edit.js","webpack://boilerplate/./src/index.js","webpack://boilerplate/./src/save.js","webpack://boilerplate/./src/team-member/edit.js","webpack://boilerplate/./src/team-member/index.js","webpack://boilerplate/./src/team-member/save.js","webpack://boilerplate/./src/team-member/sortable-item.js","webpack://boilerplate/./src/editor.scss?d4ae","webpack://boilerplate/./src/style.scss?5612","webpack://boilerplate/external window \"React\"","webpack://boilerplate/external window \"ReactDOM\"","webpack://boilerplate/external window [\"wp\",\"blob\"]","webpack://boilerplate/external window [\"wp\",\"blockEditor\"]","webpack://boilerplate/external window [\"wp\",\"blocks\"]","webpack://boilerplate/external window [\"wp\",\"components\"]","webpack://boilerplate/external window [\"wp\",\"compose\"]","webpack://boilerplate/external window [\"wp\",\"data\"]","webpack://boilerplate/external window [\"wp\",\"element\"]","webpack://boilerplate/external window [\"wp\",\"i18n\"]","webpack://boilerplate/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://boilerplate/webpack/bootstrap","webpack://boilerplate/webpack/runtime/chunk loaded","webpack://boilerplate/webpack/runtime/compat get default export","webpack://boilerplate/webpack/runtime/define property getters","webpack://boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://boilerplate/webpack/runtime/make namespace object","webpack://boilerplate/webpack/runtime/jsonp chunk loading","webpack://boilerplate/webpack/before-startup","webpack://boilerplate/webpack/startup","webpack://boilerplate/webpack/after-startup"],"sourcesContent":["import React, { useState, useCallback } from 'react';\n\nconst hiddenStyles = {\n  display: 'none'\n};\nfunction HiddenText({\n  id,\n  value\n}) {\n  return React.createElement(\"div\", {\n    id: id,\n    style: hiddenStyles\n  }, value);\n}\n\nconst visuallyHidden = {\n  position: 'absolute',\n  width: 1,\n  height: 1,\n  margin: -1,\n  border: 0,\n  padding: 0,\n  overflow: 'hidden',\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(100%)',\n  whiteSpace: 'nowrap'\n};\nfunction LiveRegion({\n  id,\n  announcement\n}) {\n  return React.createElement(\"div\", {\n    id: id,\n    style: visuallyHidden,\n    role: \"status\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": true\n  }, announcement);\n}\n\nfunction useAnnouncement() {\n  const [announcement, setAnnouncement] = useState('');\n  const announce = useCallback(value => {\n    if (value != null) {\n      setAnnouncement(value);\n    }\n  }, []);\n  return {\n    announce,\n    announcement\n  };\n}\n\nexport { HiddenText, LiveRegion, useAnnouncement };\n//# sourceMappingURL=accessibility.esm.js.map\n","import React, { createContext, useContext, useRef, useEffect, useState, useMemo, useCallback, memo, useReducer } from 'react';\nimport { createPortal, unstable_batchedUpdates } from 'react-dom';\nimport { useUniqueId, getEventCoordinates, canUseDOM, add, useInterval, useLazyMemo, useIsomorphicLayoutEffect, useNodeRef, subtract, CSS } from '@dnd-kit/utilities';\nimport { useAnnouncement, HiddenText, LiveRegion } from '@dnd-kit/accessibility';\n\nconst screenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `\n};\nconst defaultAnnouncements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  }\n\n};\n\nvar Action;\n\n(function (Action) {\n  Action[\"DragStart\"] = \"dragStart\";\n  Action[\"DragMove\"] = \"dragMove\";\n  Action[\"DragEnd\"] = \"dragEnd\";\n  Action[\"DragCancel\"] = \"dragCancel\";\n  Action[\"DragOver\"] = \"dragOver\";\n  Action[\"RegisterDroppable\"] = \"registerDroppable\";\n  Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n  Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\n\nfunction noop(..._args) {}\n\nclass DroppableContainersMap extends Map {\n  get(id) {\n    var _super$get;\n\n    return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;\n  }\n\n  toArray() {\n    return Array.from(this.values());\n  }\n\n  getEnabled() {\n    return this.toArray().filter(({\n      disabled\n    }) => !disabled);\n  }\n\n  getNodeFor(id) {\n    var _this$get$node$curren, _this$get;\n\n    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;\n  }\n\n}\n\nconst Context = /*#__PURE__*/createContext({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: ''\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: /*#__PURE__*/new Map(),\n  droppableContainers: /*#__PURE__*/new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null\n    },\n    rect: null,\n    setRef: noop\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false\n});\n\nfunction getInitialState() {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {\n        x: 0,\n        y: 0\n      },\n      nodes: {},\n      translate: {\n        x: 0,\n        y: 0\n      }\n    },\n    droppable: {\n      containers: new DroppableContainersMap()\n    }\n  };\n}\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Action.DragStart:\n      return { ...state,\n        draggable: { ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active\n        }\n      };\n\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return { ...state,\n        draggable: { ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y\n          }\n        }\n      };\n\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return { ...state,\n        draggable: { ...state.draggable,\n          active: null,\n          initialCoordinates: {\n            x: 0,\n            y: 0\n          },\n          translate: {\n            x: 0,\n            y: 0\n          }\n        }\n      };\n\n    case Action.RegisterDroppable:\n      {\n        const {\n          element\n        } = action;\n        const {\n          id\n        } = element;\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.set(id, element);\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    case Action.SetDroppableDisabled:\n      {\n        const {\n          id,\n          key,\n          disabled\n        } = action;\n        const element = state.droppable.containers.get(id);\n\n        if (!element || key !== element.key) {\n          return state;\n        }\n\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.set(id, { ...element,\n          disabled\n        });\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    case Action.UnregisterDroppable:\n      {\n        const {\n          id,\n          key\n        } = action;\n        const element = state.droppable.containers.get(id);\n\n        if (!element || key !== element.key) {\n          return state;\n        }\n\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.delete(id);\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nconst DndMonitorContext = /*#__PURE__*/createContext({\n  type: null,\n  event: null\n});\nfunction useDndMonitor({\n  onDragStart,\n  onDragMove,\n  onDragOver,\n  onDragEnd,\n  onDragCancel\n}) {\n  const monitorState = useContext(DndMonitorContext);\n  const previousMonitorState = useRef(monitorState);\n  useEffect(() => {\n    if (monitorState !== previousMonitorState.current) {\n      const {\n        type,\n        event\n      } = monitorState;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart == null ? void 0 : onDragStart(event);\n          break;\n\n        case Action.DragMove:\n          onDragMove == null ? void 0 : onDragMove(event);\n          break;\n\n        case Action.DragOver:\n          onDragOver == null ? void 0 : onDragOver(event);\n          break;\n\n        case Action.DragCancel:\n          onDragCancel == null ? void 0 : onDragCancel(event);\n          break;\n\n        case Action.DragEnd:\n          onDragEnd == null ? void 0 : onDragEnd(event);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [monitorState, onDragStart, onDragMove, onDragOver, onDragEnd, onDragCancel]);\n}\n\nfunction Accessibility({\n  announcements = defaultAnnouncements,\n  hiddenTextDescribedById,\n  screenReaderInstructions\n}) {\n  const {\n    announce,\n    announcement\n  } = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  useDndMonitor(useMemo(() => ({\n    onDragStart({\n      active\n    }) {\n      announce(announcements.onDragStart(active.id));\n    },\n\n    onDragMove({\n      active,\n      over\n    }) {\n      if (announcements.onDragMove) {\n        announce(announcements.onDragMove(active.id, over == null ? void 0 : over.id));\n      }\n    },\n\n    onDragOver({\n      active,\n      over\n    }) {\n      announce(announcements.onDragOver(active.id, over == null ? void 0 : over.id));\n    },\n\n    onDragEnd({\n      active,\n      over\n    }) {\n      announce(announcements.onDragEnd(active.id, over == null ? void 0 : over.id));\n    },\n\n    onDragCancel({\n      active\n    }) {\n      announce(announcements.onDragCancel(active.id));\n    }\n\n  }), [announce, announcements]));\n  return mounted ? createPortal(React.createElement(React.Fragment, null, React.createElement(HiddenText, {\n    id: hiddenTextDescribedById,\n    value: screenReaderInstructions.draggable\n  }), React.createElement(LiveRegion, {\n    id: liveRegionId,\n    announcement: announcement\n  })), document.body) : null;\n}\n\nconst defaultCoordinates = /*#__PURE__*/Object.freeze({\n  x: 0,\n  y: 0\n});\n\n/**\r\n * Returns the distance between two points\r\n */\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction getRelativeTransformOrigin(event, rect) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  const eventCoordinates = getEventCoordinates(event);\n  const transformOrigin = {\n    x: (eventCoordinates.x - rect.left) / rect.width * 100,\n    y: (eventCoordinates.y - rect.top) / rect.height * 100\n  };\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */\n\nfunction centerOfRectangle(rect, left = rect.offsetLeft, top = rect.offsetTop) {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5\n  };\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the center of a given\r\n * rectangle.\r\n */\n\n\nconst closestCenter = ({\n  collisionRect,\n  droppableContainers\n}) => {\n  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);\n  let minDistanceToCenter = Infinity;\n  let minDroppableContainer = null;\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      rect: {\n        current: rect\n      }\n    } = droppableContainer;\n\n    if (rect) {\n      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n\n      if (distBetween < minDistanceToCenter) {\n        minDistanceToCenter = distBetween;\n        minDroppableContainer = droppableContainer.id;\n      }\n    }\n  }\n\n  return minDroppableContainer;\n};\n\nfunction adjustScale(transform, rect1, rect2) {\n  return { ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n  };\n}\n\nfunction getRectDelta(rect1, rect2) {\n  return rect1 && rect2 ? {\n    x: rect1.left - rect2.left,\n    y: rect1.top - rect2.top\n  } : defaultCoordinates;\n}\n\nfunction createRectAdjustmentFn(modifier) {\n  return function adjustViewRect(viewRect, ...adjustments) {\n    return adjustments.reduce((acc, adjustment) => ({ ...acc,\n      top: acc.top + modifier * adjustment.y,\n      bottom: acc.bottom + modifier * adjustment.y,\n      left: acc.left + modifier * adjustment.x,\n      right: acc.right + modifier * adjustment.x,\n      offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n      offsetTop: acc.offsetTop + modifier * adjustment.y\n    }), { ...viewRect\n    });\n  };\n}\nconst getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);\n\nfunction isFixed(node, computedStyle = window.getComputedStyle(node)) {\n  return computedStyle.position === 'fixed';\n}\n\nfunction isScrollable(node, computedStyle = window.getComputedStyle(node)) {\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.find(property => {\n    const value = computedStyle[property];\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  }) != null;\n}\n\nfunction getScrollableAncestors(element) {\n  const scrollParents = [];\n\n  function findScrollableAncestors(node) {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {\n      scrollParents.push(node.scrollingElement);\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const computedStyle = window.getComputedStyle(node);\n\n    if (isScrollable(node, computedStyle)) {\n      scrollParents.push(node);\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element.parentNode) : scrollParents;\n}\n\nfunction getScrollableElement(element) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n\nfunction getScrollCoordinates(element) {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop\n  };\n}\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n  Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\n\nfunction getScrollPosition(scrollingContainer) {\n  const minScroll = {\n    x: 0,\n    y: 0\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight\n  };\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll\n  };\n}\n\nfunction isDocumentScrollingElement(element) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2\n};\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, {\n  top,\n  left,\n  right,\n  bottom\n}, acceleration = 10, thresholdPercentage = defaultThreshold) {\n  const {\n    clientHeight,\n    clientWidth\n  } = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer) ? {\n    top: 0,\n    left: 0,\n    right: clientWidth,\n    bottom: clientHeight,\n    width: clientWidth,\n    height: clientHeight\n  } : scrollContainerRect;\n  const {\n    isTop,\n    isBottom,\n    isLeft,\n    isRight\n  } = getScrollPosition(scrollContainer);\n  const direction = {\n    x: 0,\n    y: 0\n  };\n  const speed = {\n    x: 0,\n    y: 0\n  };\n  const threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.top + threshold.height - top) / threshold.height);\n  } else if (!isBottom && bottom >= finalScrollContainerRect.bottom - threshold.height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.right - threshold.width - right) / threshold.width);\n  } else if (!isLeft && left <= finalScrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.left + threshold.width - left) / threshold.width);\n  }\n\n  return {\n    direction,\n    speed\n  };\n}\n\nfunction getScrollElementRect(element) {\n  if (element === document.scrollingElement) {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight\n    };\n  }\n\n  const {\n    top,\n    left,\n    right,\n    bottom\n  } = element.getBoundingClientRect();\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\n\nfunction getScrollOffsets(scrollableAncestors) {\n  return scrollableAncestors.reduce((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nfunction getEdgeOffset(node, parent, offset = defaultCoordinates) {\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  const nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent, parent, nodeOffset);\n}\n\nfunction getLayoutRect(element) {\n  const {\n    offsetWidth: width,\n    offsetHeight: height\n  } = element;\n  const {\n    x: offsetLeft,\n    y: offsetTop\n  } = getEdgeOffset(element, null);\n  return {\n    width,\n    height,\n    offsetTop,\n    offsetLeft\n  };\n}\nfunction getViewportLayoutRect(element) {\n  const {\n    width,\n    height,\n    top,\n    left\n  } = element.getBoundingClientRect();\n  const scrollableAncestors = getScrollableAncestors(element);\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n  return {\n    width,\n    height,\n    offsetTop: top + scrollOffsets.y,\n    offsetLeft: left + scrollOffsets.x\n  };\n}\nfunction getBoundingClientRect(element) {\n  if (element instanceof Window) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    return {\n      top: 0,\n      left: 0,\n      right: width,\n      bottom: height,\n      width,\n      height,\n      offsetTop: 0,\n      offsetLeft: 0\n    };\n  }\n\n  const {\n    offsetTop,\n    offsetLeft\n  } = getLayoutRect(element);\n  const {\n    width,\n    height,\n    top,\n    bottom,\n    left,\n    right\n  } = element.getBoundingClientRect();\n  return {\n    width,\n    height,\n    top,\n    bottom,\n    right,\n    left,\n    offsetTop,\n    offsetLeft\n  };\n}\nfunction getViewRect(element) {\n  const {\n    width,\n    height,\n    offsetTop,\n    offsetLeft\n  } = getLayoutRect(element);\n  const scrollableAncestors = getScrollableAncestors(element);\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n  const top = offsetTop - scrollOffsets.y;\n  const left = offsetLeft - scrollOffsets.x;\n  return {\n    width,\n    height,\n    top,\n    bottom: top + height,\n    right: left + width,\n    left,\n    offsetTop,\n    offsetLeft\n  };\n}\n\nfunction isViewRect(entry) {\n  return 'top' in entry;\n}\n\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */\n\nfunction cornersOfRectangle(rect, left = rect.offsetLeft, top = rect.offsetTop) {\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: left + rect.width,\n    y: top\n  }, {\n    x: left,\n    y: top + rect.height\n  }, {\n    x: left + rect.width,\n    y: top + rect.height\n  }];\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the corners of\r\n * another rectangle.\r\n */\n\n\nconst closestCorners = ({\n  collisionRect,\n  droppableContainers\n}) => {\n  let minDistanceToCorners = Infinity;\n  let minDistanceContainer = null;\n  const corners = cornersOfRectangle(collisionRect, collisionRect.left, collisionRect.top);\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      rect: {\n        current: rect\n      }\n    } = droppableContainer;\n\n    if (rect) {\n      const rectCorners = cornersOfRectangle(rect, isViewRect(rect) ? rect.left : undefined, isViewRect(rect) ? rect.top : undefined);\n      const distances = corners.reduce((accumulator, corner, index) => {\n        return accumulator + distanceBetween(rectCorners[index], corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n\n      if (effectiveDistance < minDistanceToCorners) {\n        minDistanceToCorners = effectiveDistance;\n        minDistanceContainer = droppableContainer.id;\n      }\n    }\n  }\n\n  return minDistanceContainer;\n};\n\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */\nfunction getIntersectionRatio(entry, target) {\n  const top = Math.max(target.top, entry.offsetTop);\n  const left = Math.max(target.left, entry.offsetLeft);\n  const right = Math.min(target.left + target.width, entry.offsetLeft + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.offsetTop + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n\n\n  return 0;\n}\n/**\r\n * Returns the rectangle that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */\n\n\nconst rectIntersection = ({\n  collisionRect,\n  droppableContainers\n}) => {\n  let maxIntersectionRatio = 0;\n  let maxIntersectingDroppableContainer = null;\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      rect: {\n        current: rect\n      }\n    } = droppableContainer;\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > maxIntersectionRatio) {\n        maxIntersectionRatio = intersectionRatio;\n        maxIntersectingDroppableContainer = droppableContainer.id;\n      }\n    }\n  }\n\n  return maxIntersectingDroppableContainer;\n};\n\nfunction getOwnerDocument(target) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n\nfunction getWindow(target) {\n  var _getOwnerDocument$def;\n\n  return (_getOwnerDocument$def = getOwnerDocument(target).defaultView) != null ? _getOwnerDocument$def : window;\n}\n\nvar AutoScrollActivator;\n\n(function (AutoScrollActivator) {\n  AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n  AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\n\nvar TraversalOrder;\n\n(function (TraversalOrder) {\n  TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n  TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\n\nfunction useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  threshold\n}) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef({\n    x: 1,\n    y: 1\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates ? {\n          top: pointerCoordinates.y,\n          bottom: pointerCoordinates.y,\n          left: pointerCoordinates.x,\n          right: pointerCoordinates.x\n        } : null;\n\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollDirection = useRef(defaultCoordinates);\n  const scrollContainerRef = useRef(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);\n  useEffect(() => {\n    if (!enabled || !scrollableAncestors.length || !rect) {\n      clearAutoScrollInterval();\n      return;\n    }\n\n    for (const scrollContainer of sortedScrollableAncestors) {\n      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n        continue;\n      }\n\n      const index = scrollableAncestors.indexOf(scrollContainer);\n      const scrolllContainerRect = scrollableAncestorRects[index];\n\n      if (!scrolllContainerRect) {\n        continue;\n      }\n\n      const {\n        direction,\n        speed\n      } = getScrollDirectionAndSpeed(scrollContainer, scrolllContainerRect, rect, acceleration, threshold);\n\n      if (speed.x > 0 || speed.y > 0) {\n        clearAutoScrollInterval();\n        scrollContainerRef.current = scrollContainer;\n        setAutoScrollInterval(autoScroll, interval);\n        scrollSpeed.current = speed;\n        scrollDirection.current = direction;\n        return;\n      }\n    }\n\n    scrollSpeed.current = {\n      x: 0,\n      y: 0\n    };\n    scrollDirection.current = {\n      x: 0,\n      y: 0\n    };\n    clearAutoScrollInterval();\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(rect), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(threshold)]);\n}\n\nfunction useCachedNode(draggableNodes, id) {\n  const draggableNode = id !== null ? draggableNodes[id] : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n  return useLazyMemo(cachedNode => {\n    var _ref;\n\n    if (id === null) {\n      return null;\n    } // In some cases, the draggable node can unmount while dragging\n    // This is the case for virtualized lists. In those situations,\n    // we fall back to the last known value for that node.\n\n\n    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n  }, [node, id]);\n}\n\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n  return useMemo(() => sensors.reduce((accumulator, sensor) => {\n    const {\n      sensor: Sensor\n    } = sensor;\n    const sensorActivators = Sensor.activators.map(activator => ({\n      eventName: activator.eventName,\n      handler: getSyntheticHandler(activator.handler, sensor)\n    }));\n    return [...accumulator, ...sensorActivators];\n  }, []), [sensors, getSyntheticHandler]);\n}\n\nfunction useData(data) {\n  const dataRef = useRef(data);\n  useIsomorphicLayoutEffect(() => {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n  return dataRef;\n}\n\nvar MeasuringStrategy;\n\n(function (MeasuringStrategy) {\n  MeasuringStrategy[MeasuringStrategy[\"Always\"] = 0] = \"Always\";\n  MeasuringStrategy[MeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n  MeasuringStrategy[MeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(MeasuringStrategy || (MeasuringStrategy = {}));\n\nvar MeasuringFrequency;\n\n(function (MeasuringFrequency) {\n  MeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(MeasuringFrequency || (MeasuringFrequency = {}));\n\nconst defaultValue = /*#__PURE__*/new Map();\nconst defaultConfig = {\n  measure: getLayoutRect,\n  strategy: MeasuringStrategy.WhileDragging,\n  frequency: MeasuringFrequency.Optimized\n};\nfunction useDroppableMeasuring(containers, {\n  dragging,\n  dependencies,\n  config\n}) {\n  const [willRecomputeLayouts, setWillRecomputeLayouts] = useState(false);\n  const {\n    frequency,\n    measure,\n    strategy\n  } = { ...defaultConfig,\n    ...config\n  };\n  const containersRef = useRef(containers);\n  const recomputeLayouts = useCallback(() => setWillRecomputeLayouts(true), []);\n  const recomputeLayoutsTimeoutId = useRef(null);\n  const disabled = isDisabled();\n  const layoutRectMap = useLazyMemo(previousValue => {\n    if (disabled && !dragging) {\n      return defaultValue;\n    }\n\n    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || willRecomputeLayouts) {\n      for (let container of containers) {\n        if (!container) {\n          continue;\n        }\n\n        container.rect.current = container.node.current ? measure(container.node.current) : null;\n      }\n\n      return createLayoutRectMap(containers);\n    }\n\n    return previousValue;\n  }, [containers, dragging, disabled, measure, willRecomputeLayouts]);\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n  useEffect(() => {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n  useEffect(function recompute() {\n    if (disabled) {\n      return;\n    }\n\n    requestAnimationFrame(recomputeLayouts);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dragging, disabled]);\n  useEffect(function forceRecomputeLayouts() {\n    if (disabled || typeof frequency !== 'number' || recomputeLayoutsTimeoutId.current !== null) {\n      return;\n    }\n\n    recomputeLayoutsTimeoutId.current = setTimeout(() => {\n      recomputeLayouts();\n      recomputeLayoutsTimeoutId.current = null;\n    }, frequency);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [frequency, disabled, recomputeLayouts, ...dependencies]);\n  return {\n    layoutRectMap,\n    recomputeLayouts,\n    willRecomputeLayouts\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction createLayoutRectMap(containers) {\n  const layoutRectMap = new Map();\n\n  if (containers) {\n    for (const container of containers) {\n      if (!container) {\n        continue;\n      }\n\n      const {\n        id,\n        rect\n      } = container;\n\n      if (rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n\nfunction useScrollOffsets(elements) {\n  const [scrollCoordinates, setScrollCoordinates] = useState(null);\n  const prevElements = useRef(elements); // To-do: Throttle the handleScroll callback\n\n  const handleScroll = useCallback(event => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates(scrollCoordinates => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n      const entries = elements.map(element => {\n        const scrollableElement = getScrollableElement(element);\n\n        if (scrollableElement) {\n          scrollableElement.addEventListener('scroll', handleScroll, {\n            passive: true\n          });\n          return [scrollableElement, getScrollCoordinates(scrollableElement)];\n        }\n\n        return null;\n      }).filter(entry => entry != null);\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements) {\n      elements.forEach(element => {\n        const scrollableElement = getScrollableElement(element);\n        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n\nconst defaultValue$1 = [];\nfunction useScrollableAncestors(node) {\n  const previousNode = useRef(node);\n  const ancestors = useLazyMemo(previousValue => {\n    if (!node) {\n      return defaultValue$1;\n    }\n\n    if (previousValue && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n      return previousValue;\n    }\n\n    return getScrollableAncestors(node);\n  }, [node]);\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n  return ancestors;\n}\n\nfunction useSensorSetup(sensors) {\n  useEffect(() => {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const teardownFns = sensors.map(({\n      sensor\n    }) => sensor.setup == null ? void 0 : sensor.setup());\n    return () => {\n      for (const teardown of teardownFns) {\n        teardown == null ? void 0 : teardown();\n      }\n    };\n  }, // TO-DO: Sensors lenght could theoretically change which would not be a valid dependency\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  sensors.map(({\n    sensor\n  }) => sensor));\n}\n\nfunction useSyntheticListeners(listeners, id) {\n  return useMemo(() => {\n    return listeners.reduce((acc, {\n      eventName,\n      handler\n    }) => {\n      acc[eventName] = event => {\n        handler(event, id);\n      };\n\n      return acc;\n    }, {});\n  }, [listeners, id]);\n}\n\nconst useClientRect = /*#__PURE__*/createUseRectFn(getBoundingClientRect);\nconst useClientRects = /*#__PURE__*/createUseRectsFn(getBoundingClientRect);\nfunction useRect(element, getRect, forceRecompute) {\n  const previousElement = useRef(element);\n  return useLazyMemo(previousValue => {\n    if (!element) {\n      return null;\n    }\n\n    if (forceRecompute || !previousValue && element || element !== previousElement.current) {\n      if (element instanceof HTMLElement && element.parentNode == null) {\n        return null;\n      }\n\n      return getRect(element);\n    }\n\n    return previousValue != null ? previousValue : null;\n  }, [element, forceRecompute, getRect]);\n}\nfunction createUseRectFn(getRect) {\n  return (element, forceRecompute) => useRect(element, getRect, forceRecompute);\n}\n\nfunction createUseRectsFn(getRect) {\n  const defaultValue = [];\n  return function useRects(elements, forceRecompute) {\n    const previousElements = useRef(elements);\n    return useLazyMemo(previousValue => {\n      if (!elements.length) {\n        return defaultValue;\n      }\n\n      if (forceRecompute || !previousValue && elements.length || elements !== previousElements.current) {\n        return elements.map(element => getRect(element));\n      }\n\n      return previousValue != null ? previousValue : defaultValue;\n    }, [elements, forceRecompute]);\n  };\n}\n\nfunction getMeasurableNode(node) {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n\n  const firstChild = node.children[0];\n  return firstChild instanceof HTMLElement ? firstChild : node;\n}\n\nfunction getDragOverlayRect(element) {\n  const {\n    width,\n    height,\n    offsetLeft,\n    offsetTop\n  } = getLayoutRect(element);\n  return {\n    top: offsetTop,\n    bottom: offsetTop + height,\n    left: offsetLeft,\n    right: offsetLeft + width,\n    width,\n    height,\n    offsetTop,\n    offsetLeft\n  };\n}\n\nconst useDragOverlayRect = /*#__PURE__*/createUseRectFn(getDragOverlayRect);\nfunction useDragOverlayMeasuring({\n  disabled,\n  forceRecompute\n}) {\n  const [nodeRef, setRef] = useNodeRef();\n  const rect = useDragOverlayRect(disabled ? null : getMeasurableNode(nodeRef.current), forceRecompute);\n  return useMemo(() => ({\n    nodeRef,\n    rect,\n    setRef\n  }), [rect, nodeRef, setRef]);\n}\n\nfunction useSensor(sensor, options) {\n  return useMemo(() => ({\n    sensor,\n    options: options != null ? options : {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [sensor, options]);\n}\n\nfunction useSensors(...sensors) {\n  return useMemo(() => [...sensors].filter(sensor => sensor != null), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [...sensors]);\n}\n\nclass Listeners {\n  constructor(target) {\n    this.target = target;\n    this.listeners = [];\n\n    this.removeAll = () => {\n      this.listeners.forEach(listener => {\n        var _this$target;\n\n        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);\n      });\n    };\n  }\n\n  add(eventName, handler, options) {\n    var _this$target2;\n\n    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);\n    this.listeners.push([eventName, handler, options]);\n  }\n\n}\n\nfunction getEventListenerTarget(element) {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  return element instanceof EventTarget ? element : getOwnerDocument(element);\n}\n\nfunction hasExceededDistance(delta, measurement) {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"Click\"] = \"click\";\n  EventName[\"Keydown\"] = \"keydown\";\n  EventName[\"ContextMenu\"] = \"contextmenu\";\n  EventName[\"Resize\"] = \"resize\";\n  EventName[\"SelectionChange\"] = \"selectionchange\";\n  EventName[\"VisibilityChange\"] = \"visibilitychange\";\n})(EventName || (EventName = {}));\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\n\nvar KeyboardCode;\n\n(function (KeyboardCode) {\n  KeyboardCode[\"Space\"] = \"Space\";\n  KeyboardCode[\"Down\"] = \"ArrowDown\";\n  KeyboardCode[\"Right\"] = \"ArrowRight\";\n  KeyboardCode[\"Left\"] = \"ArrowLeft\";\n  KeyboardCode[\"Up\"] = \"ArrowUp\";\n  KeyboardCode[\"Esc\"] = \"Escape\";\n  KeyboardCode[\"Enter\"] = \"Enter\";\n})(KeyboardCode || (KeyboardCode = {}));\n\nconst defaultKeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter]\n};\nconst defaultKeyboardCoordinateGetter = (event, {\n  currentCoordinates\n}) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x + 25\n      };\n\n    case KeyboardCode.Left:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x - 25\n      };\n\n    case KeyboardCode.Down:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y + 25\n      };\n\n    case KeyboardCode.Up:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y - 25\n      };\n  }\n\n  return undefined;\n};\n\nclass KeyboardSensor {\n  constructor(props) {\n    this.props = props;\n    this.autoScrollEnabled = false;\n    this.coordinates = defaultCoordinates;\n    const {\n      event: {\n        target\n      }\n    } = props;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    this.handleStart();\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  handleStart() {\n    const {\n      activeNode,\n      onStart\n    } = this.props;\n\n    if (!activeNode.node.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getBoundingClientRect(activeNode.node.current);\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top\n    };\n    this.coordinates = coordinates;\n    onStart(coordinates);\n  }\n\n  handleKeyDown(event) {\n    if (event instanceof KeyboardEvent) {\n      const {\n        coordinates\n      } = this;\n      const {\n        active,\n        context,\n        options\n      } = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth'\n      } = options;\n      const {\n        code\n      } = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0\n        };\n        const {\n          scrollableAncestors\n        } = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const coordinatesDelta = subtract(newCoordinates, coordinates);\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n          const clampedCoordinates = {\n            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n          };\n          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Right && scrollContainer.scrollLeft + coordinatesDelta.x <= maxScroll.x || direction === KeyboardCode.Left && scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x;\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Down && scrollContainer.scrollTop + coordinatesDelta.y <= maxScroll.y || direction === KeyboardCode.Up && scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y;\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior\n            });\n            break;\n          }\n        }\n\n        this.handleMove(event, add(newCoordinates, scrollDelta));\n      }\n    }\n  }\n\n  handleMove(event, coordinates) {\n    const {\n      onMove\n    } = this.props;\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  handleEnd(event) {\n    const {\n      onEnd\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel(event) {\n    const {\n      onCancel\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n}\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: (event, {\n    keyboardCodes = defaultKeyboardCodes,\n    onActivation\n  }) => {\n    const {\n      code\n    } = event.nativeEvent;\n\n    if (keyboardCodes.start.includes(code)) {\n      event.preventDefault();\n      onActivation == null ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n\n    return false;\n  }\n}];\n\nfunction isDistanceConstraint(constraint) {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(constraint) {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nclass AbstractPointerSensor {\n  constructor(props, events, listenerTarget = getEventListenerTarget(props.event.target)) {\n    this.props = props;\n    this.events = events;\n    this.autoScrollEnabled = true;\n    this.activated = false;\n    this.timeoutId = null;\n    const {\n      event\n    } = props;\n    const {\n      target\n    } = event;\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    const {\n      events,\n      props: {\n        options: {\n          activationConstraint\n        }\n      }\n    } = this;\n    this.listeners.add(events.move.name, this.handleMove, {\n      passive: false\n    });\n    this.listeners.add(events.end.name, this.handleEnd);\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  handleStart() {\n    const {\n      initialCoordinates\n    } = this;\n    const {\n      onStart\n    } = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true; // Stop propagation of click events once activation constraints are met\n\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true\n      }); // Remove any text selection from the document\n\n      this.removeTextSelection(); // Prevent further text selection while dragging\n\n      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);\n      onStart(initialCoordinates);\n    }\n  }\n\n  handleMove(event) {\n    const {\n      activated,\n      initialCoordinates,\n      props\n    } = this;\n    const {\n      onMove,\n      options: {\n        activationConstraint\n      }\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event);\n    const delta = subtract(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  handleEnd() {\n    const {\n      onEnd\n    } = this.props;\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel() {\n    const {\n      onCancel\n    } = this.props;\n    this.detach();\n    onCancel();\n  }\n\n  handleKeydown(event) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  removeTextSelection() {\n    var _this$document$getSel;\n\n    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();\n  }\n\n}\n\nconst events = {\n  move: {\n    name: 'pointermove'\n  },\n  end: {\n    name: 'pointerup'\n  }\n};\nclass PointerSensor extends AbstractPointerSensor {\n  constructor(props) {\n    const {\n      event\n    } = props; // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n\n    const listenerTarget = getOwnerDocument(event.target);\n    super(props, events, listenerTarget);\n  }\n\n}\nPointerSensor.activators = [{\n  eventName: 'onPointerDown',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    if (!event.isPrimary || event.button !== 0) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nconst events$1 = {\n  move: {\n    name: 'mousemove'\n  },\n  end: {\n    name: 'mouseup'\n  }\n};\nvar MouseButton;\n\n(function (MouseButton) {\n  MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\n\nclass MouseSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$1, getOwnerDocument(props.event.target));\n  }\n\n}\nMouseSensor.activators = [{\n  eventName: 'onMouseDown',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    if (event.button === MouseButton.RightClick) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nconst events$2 = {\n  move: {\n    name: 'touchmove'\n  },\n  end: {\n    name: 'touchend'\n  }\n};\nclass TouchSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$2);\n  }\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events$2.move.name, noop, {\n      capture: false,\n      passive: false\n    });\n    return function teardown() {\n      window.removeEventListener(events$2.move.name, noop);\n    }; // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n\n    function noop() {}\n  }\n\n}\nTouchSensor.activators = [{\n  eventName: 'onTouchStart',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    const {\n      touches\n    } = event;\n\n    if (touches.length > 1) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nfunction applyModifiers(modifiers, {\n  transform,\n  ...args\n}) {\n  return (modifiers == null ? void 0 : modifiers.length) ? modifiers.reduce((accumulator, modifier) => {\n    return modifier({\n      transform: accumulator,\n      ...args\n    });\n  }, transform) : transform;\n}\n\nconst defaultSensors = [{\n  sensor: PointerSensor,\n  options: {}\n}, {\n  sensor: KeyboardSensor,\n  options: {}\n}];\nconst defaultData = {\n  current: {}\n};\nconst ActiveDraggableContext = /*#__PURE__*/createContext({ ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1\n});\nconst DndContext = /*#__PURE__*/memo(function DndContext({\n  id,\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  measuring,\n  modifiers,\n  screenReaderInstructions: screenReaderInstructions$1 = screenReaderInstructions,\n  ...props\n}) {\n  var _measuring$draggable$, _measuring$draggable, _sensorContext$curren, _dragOverlay$rect, _over$rect;\n\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [monitorState, setMonitorState] = useState(() => ({\n    type: null,\n    event: null\n  }));\n  const [isDragging, setIsDragging] = useState(false);\n  const {\n    draggable: {\n      active: activeId,\n      nodes: draggableNodes,\n      translate\n    },\n    droppable: {\n      containers: droppableContainers\n    }\n  } = state;\n  const node = activeId ? draggableNodes[activeId] : null;\n  const activeRects = useRef({\n    initial: null,\n    translated: null\n  });\n  const active = useMemo(() => {\n    var _node$data;\n\n    return activeId != null ? {\n      id: activeId,\n      // It's possible for the active node to unmount while dragging\n      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n      rect: activeRects\n    } : null;\n  }, [activeId, node]);\n  const activeRef = useRef(null);\n  const [activeSensor, setActiveSensor] = useState(null);\n  const [activatorEvent, setActivatorEvent] = useState(null);\n  const latestProps = useRef(props);\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const enabledDroppableContainers = useMemo(() => {\n    return droppableContainers.getEnabled();\n  }, [droppableContainers]);\n  const {\n    layoutRectMap: droppableRects,\n    recomputeLayouts,\n    willRecomputeLayouts\n  } = useDroppableMeasuring(enabledDroppableContainers, {\n    dragging: isDragging,\n    dependencies: [translate.x, translate.y],\n    config: measuring == null ? void 0 : measuring.droppable\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = activatorEvent ? getEventCoordinates(activatorEvent) : null;\n  const activeNodeRect = useRect(activeNode, (_measuring$draggable$ = measuring == null ? void 0 : (_measuring$draggable = measuring.draggable) == null ? void 0 : _measuring$draggable.measure) != null ? _measuring$draggable$ : getViewRect);\n  const activeNodeClientRect = useClientRect(activeNode);\n  const initialActiveNodeRectRef = useRef(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n  const sensorContext = useRef({\n    active: null,\n    activeNode,\n    collisionRect: null,\n    droppableRects,\n    draggableNodes,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n    translatedRect: null\n  });\n  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);\n  const windowRect = useClientRect(activeNode ? activeNode.ownerDocument.defaultView : null);\n  const containerNodeRect = useClientRect(activeNode ? activeNode.parentElement : null);\n  const scrollableAncestors = useScrollableAncestors(activeId ? overNode != null ? overNode : activeNode : null);\n  const scrollableAncestorRects = useClientRects(scrollableAncestors);\n  const dragOverlay = useDragOverlayMeasuring({\n    disabled: activeId == null,\n    forceRecompute: willRecomputeLayouts\n  }); // Use the rect of the drag overlay if it is mounted\n\n  const draggingNodeRect = (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect; // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n\n  const nodeRectDelta = draggingNodeRect === activeNodeRect ? getRectDelta(activeNodeRect, initialActiveNodeRect) : defaultCoordinates;\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1\n    },\n    activatorEvent,\n    active,\n    activeNodeRect: activeNodeClientRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  });\n  const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;\n  const scrollAdjustment = useScrollOffsets(scrollableAncestors);\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n  const translatedRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;\n  const collisionRect = translatedRect ? getAdjustedRect(translatedRect, scrollAdjustment) : null;\n  const overId = active && collisionRect ? collisionDetection({\n    active,\n    collisionRect,\n    droppableContainers: enabledDroppableContainers\n  }) : null;\n  const [over, setOver] = useState(null);\n  const transform = adjustScale(modifiedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);\n  const instantiateSensor = useCallback((event, {\n    sensor: Sensor,\n    options\n  }) => {\n    if (!activeRef.current) {\n      return;\n    }\n\n    const activeNode = draggableNodes[activeRef.current];\n\n    if (!activeNode) {\n      return;\n    }\n\n    const sensorInstance = new Sensor({\n      active: activeRef.current,\n      activeNode,\n      event: event.nativeEvent,\n      options,\n      // Sensors need to be instantiated with refs for arguments that change over time\n      // otherwise they are frozen in time with the stale arguments\n      context: sensorContext,\n\n      onStart(initialCoordinates) {\n        const id = activeRef.current;\n\n        if (!id) {\n          return;\n        }\n\n        const node = draggableNodes[id];\n\n        if (!node) {\n          return;\n        }\n\n        const {\n          onDragStart\n        } = latestProps.current;\n        const event = {\n          active: {\n            id,\n            data: node.data,\n            rect: activeRects\n          }\n        };\n        unstable_batchedUpdates(() => {\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates,\n            active: id\n          });\n          setMonitorState({\n            type: Action.DragStart,\n            event\n          });\n        });\n        onDragStart == null ? void 0 : onDragStart(event);\n      },\n\n      onMove(coordinates) {\n        dispatch({\n          type: Action.DragMove,\n          coordinates\n        });\n      },\n\n      onEnd: createHandler(Action.DragEnd),\n      onCancel: createHandler(Action.DragCancel)\n    });\n    unstable_batchedUpdates(() => {\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n    });\n\n    function createHandler(type) {\n      return async function handler() {\n        const {\n          active,\n          over,\n          scrollAdjustedTranslate\n        } = sensorContext.current;\n        let event = null;\n\n        if (active && scrollAdjustedTranslate) {\n          const {\n            cancelDrop\n          } = latestProps.current;\n          event = {\n            active: active,\n            delta: scrollAdjustedTranslate,\n            over\n          };\n\n          if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n            const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n            if (shouldCancel) {\n              type = Action.DragCancel;\n            }\n          }\n        }\n\n        activeRef.current = null;\n        unstable_batchedUpdates(() => {\n          dispatch({\n            type\n          });\n          setOver(null);\n          setIsDragging(false);\n          setActiveSensor(null);\n          setActivatorEvent(null);\n\n          if (event) {\n            setMonitorState({\n              type,\n              event\n            });\n          }\n        });\n\n        if (event) {\n          const {\n            onDragCancel,\n            onDragEnd\n          } = latestProps.current;\n          const handler = type === Action.DragEnd ? onDragEnd : onDragCancel;\n          handler == null ? void 0 : handler(event);\n        }\n      };\n    }\n  }, [dispatch, draggableNodes]);\n  const bindActivatorToSensorInstantiator = useCallback((handler, sensor) => {\n    return (event, active) => {\n      const nativeEvent = event.nativeEvent;\n\n      if ( // No active draggable\n      activeRef.current !== null || // Event has already been captured\n      nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n        return;\n      }\n\n      if (handler(event, sensor.options) === true) {\n        nativeEvent.dndKit = {\n          capturedBy: sensor.sensor\n        };\n        activeRef.current = active;\n        instantiateSensor(event, sensor);\n      }\n    };\n  }, [instantiateSensor]);\n  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n  useSensorSetup(sensors);\n  useIsomorphicLayoutEffect(() => {\n    latestProps.current = props;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  Object.values(props));\n  useEffect(() => {\n    if (activeId != null) {\n      setIsDragging(true);\n    }\n  }, [activeId]);\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n  useEffect(() => {\n    const {\n      onDragMove\n    } = latestProps.current;\n    const {\n      active,\n      over\n    } = sensorContext.current;\n\n    if (!active) {\n      return;\n    }\n\n    const event = {\n      active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over\n    };\n    setMonitorState({\n      type: Action.DragMove,\n      event\n    });\n    onDragMove == null ? void 0 : onDragMove(event);\n  }, [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n  useEffect(() => {\n    const {\n      active,\n      droppableContainers,\n      scrollAdjustedTranslate\n    } = sensorContext.current;\n\n    if (!active || !activeRef.current || !scrollAdjustedTranslate) {\n      return;\n    }\n\n    const {\n      onDragOver\n    } = latestProps.current;\n    const overContainer = droppableContainers.get(overId);\n    const over = overContainer && overContainer.rect.current ? {\n      id: overContainer.id,\n      rect: overContainer.rect.current,\n      data: overContainer.data,\n      disabled: overContainer.disabled\n    } : null;\n    const event = {\n      active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over\n    };\n    unstable_batchedUpdates(() => {\n      setOver(over);\n      setMonitorState({\n        type: Action.DragOver,\n        event\n      });\n      onDragOver == null ? void 0 : onDragOver(event);\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [overId]);\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      active,\n      activeNode,\n      collisionRect,\n      droppableRects,\n      draggableNodes,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate,\n      translatedRect\n    };\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: translatedRect\n    };\n  }, [active, activeNode, collisionRect, draggableNodes, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate, translatedRect]);\n  useAutoScroller({ ...getAutoScrollerOptions(),\n    draggingRect: translatedRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects\n  });\n  const contextValue = useMemo(() => {\n    const memoizedContext = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activeNodeClientRect,\n      activatorEvent,\n      activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById\n      },\n      containerNodeRect,\n      dispatch,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      recomputeLayouts,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      willRecomputeLayouts,\n      windowRect\n    };\n    return memoizedContext;\n  }, [active, activeNode, activeNodeClientRect, activeNodeRect, activatorEvent, activators, containerNodeRect, dragOverlay, dispatch, draggableNodes, draggableDescribedById, droppableContainers, droppableRects, over, recomputeLayouts, scrollableAncestors, scrollableAncestorRects, willRecomputeLayouts, windowRect]);\n  return React.createElement(DndMonitorContext.Provider, {\n    value: monitorState\n  }, React.createElement(Context.Provider, {\n    value: contextValue\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: transform\n  }, children)), React.createElement(Accessibility, {\n    announcements: announcements,\n    hiddenTextDescribedById: draggableDescribedById,\n    screenReaderInstructions: screenReaderInstructions$1\n  }));\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n    const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n    const enabled = !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return { ...autoScroll,\n        enabled\n      };\n    }\n\n    return {\n      enabled\n    };\n  }\n});\n\nconst NullContext = /*#__PURE__*/createContext(null);\nconst defaultRole = 'button';\nconst ID_PREFIX = 'Droppable';\nfunction useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes\n}) {\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    ariaDescribedById,\n    draggableNodes,\n    droppableRects,\n    activators,\n    over\n  } = useContext(Context);\n  const {\n    role = defaultRole,\n    roleDescription = 'draggable',\n    tabIndex = 0\n  } = attributes != null ? attributes : {};\n  const isDragging = (active == null ? void 0 : active.id) === id;\n  const transform = useContext(isDragging ? ActiveDraggableContext : NullContext);\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useData(data);\n  useEffect(() => {\n    draggableNodes[id] = {\n      id,\n      key,\n      node,\n      data: dataRef\n    };\n    return () => {\n      const node = draggableNodes[id];\n\n      if (node && node.key === key) {\n        delete draggableNodes[id];\n      }\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes, id]);\n  const memoizedAttributes = useMemo(() => ({\n    role,\n    tabIndex,\n    'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n    'aria-roledescription': roleDescription,\n    'aria-describedby': ariaDescribedById.draggable\n  }), [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);\n  return {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes: memoizedAttributes,\n    droppableRects,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform\n  };\n}\n\nfunction useDndContext() {\n  return useContext(Context);\n}\n\nconst ID_PREFIX$1 = 'Droppable';\nfunction useDroppable({\n  data,\n  disabled = false,\n  id\n}) {\n  const key = useUniqueId(ID_PREFIX$1);\n  const {\n    active,\n    dispatch,\n    over\n  } = useContext(Context);\n  const rect = useRef(null);\n  const [nodeRef, setNodeRef] = useNodeRef();\n  const dataRef = useData(data);\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: Action.RegisterDroppable,\n      element: {\n        id,\n        key,\n        disabled,\n        node: nodeRef,\n        rect,\n        data: dataRef\n      }\n    });\n    return () => dispatch({\n      type: Action.UnregisterDroppable,\n      key,\n      id\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id]);\n  useEffect(() => {\n    dispatch({\n      type: Action.SetDroppableDisabled,\n      id,\n      key,\n      disabled\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    active,\n    rect,\n    isOver: (over == null ? void 0 : over.id) === id,\n    node: nodeRef,\n    over,\n    setNodeRef\n  };\n}\n\nfunction useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  easing,\n  dragSourceOpacity,\n  node,\n  transform\n}) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n  useEffect(() => {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      var _draggableNodes$activ;\n\n      const finalNode = (_draggableNodes$activ = draggableNodes[activeId]) == null ? void 0 : _draggableNodes$activ.node.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        const fromNode = getMeasurableNode(node);\n\n        if (fromNode) {\n          const from = fromNode.getBoundingClientRect();\n          const to = getViewRect(finalNode);\n          const delta = {\n            x: from.left - to.left,\n            y: from.top - to.top\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            const scaleDelta = {\n              scaleX: adjustScale ? to.width * transform.scaleX / from.width : 1,\n              scaleY: adjustScale ? to.height * transform.scaleY / from.height : 1\n            };\n            const finalTransform = CSS.Transform.toString({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              ...scaleDelta\n            });\n            const originalOpacity = finalNode.style.opacity;\n\n            if (dragSourceOpacity != null) {\n              finalNode.style.opacity = `${dragSourceOpacity}`;\n            }\n\n            const nodeAnimation = node.animate([{\n              transform: CSS.Transform.toString(transform)\n            }, {\n              transform: finalTransform\n            }], {\n              easing,\n              duration\n            });\n\n            nodeAnimation.onfinish = () => {\n              node.style.display = 'none';\n              setDropAnimationComplete(true);\n\n              if (finalNode && dragSourceOpacity != null) {\n                finalNode.style.opacity = originalOpacity;\n              }\n            };\n\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [animate, activeId, adjustScale, draggableNodes, duration, easing, dragSourceOpacity, node, transform]);\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n  return dropAnimationComplete;\n}\n\nconst defaultTransition = activatorEvent => {\n  const isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nconst defaultDropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0\n};\nconst DragOverlay = /*#__PURE__*/React.memo(({\n  adjustScale = false,\n  children,\n  dropAnimation = defaultDropAnimation,\n  style: styleProp,\n  transition = defaultTransition,\n  modifiers,\n  wrapperElement = 'div',\n  className,\n  zIndex = 999\n}) => {\n  var _active$id, _attributesSnapshot$c;\n\n  const {\n    active,\n    activeNodeRect,\n    activeNodeClientRect,\n    containerNodeRect,\n    draggableNodes,\n    activatorEvent,\n    over,\n    dragOverlay,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  } = useDndContext();\n  const transform = useContext(ActiveDraggableContext);\n  const modifiedTransform = applyModifiers(modifiers, {\n    activatorEvent,\n    active,\n    activeNodeRect: activeNodeClientRect,\n    containerNodeRect,\n    draggingNodeRect: dragOverlay.rect,\n    over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    transform,\n    windowRect\n  });\n  const isDragging = active !== null;\n  const finalTransform = adjustScale ? modifiedTransform : { ...modifiedTransform,\n    scaleX: 1,\n    scaleY: 1\n  };\n  const initialNodeRect = useLazyMemo(previousValue => {\n    if (isDragging) {\n      return previousValue != null ? previousValue : activeNodeRect;\n    }\n\n    return null;\n  }, [isDragging, activeNodeRect]);\n  const style = initialNodeRect ? {\n    position: 'fixed',\n    width: initialNodeRect.width,\n    height: initialNodeRect.height,\n    top: initialNodeRect.top,\n    left: initialNodeRect.left,\n    zIndex,\n    transform: CSS.Transform.toString(finalTransform),\n    touchAction: 'none',\n    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, initialNodeRect) : undefined,\n    transition: typeof transition === 'function' ? transition(activatorEvent) : transition,\n    ...styleProp\n  } : undefined;\n  const attributes = isDragging ? {\n    style,\n    children,\n    className,\n    transform: finalTransform\n  } : undefined;\n  const attributesSnapshot = useRef(attributes);\n  const derivedAttributes = attributes != null ? attributes : attributesSnapshot.current;\n  const {\n    children: finalChildren,\n    transform: _,\n    ...otherAttributes\n  } = derivedAttributes != null ? derivedAttributes : {};\n  const prevActiveId = useRef((_active$id = active == null ? void 0 : active.id) != null ? _active$id : null);\n  const dropAnimationComplete = useDropAnimation({\n    animate: Boolean(dropAnimation && prevActiveId.current && !active),\n    adjustScale,\n    activeId: prevActiveId.current,\n    draggableNodes,\n    duration: dropAnimation == null ? void 0 : dropAnimation.duration,\n    easing: dropAnimation == null ? void 0 : dropAnimation.easing,\n    dragSourceOpacity: dropAnimation == null ? void 0 : dropAnimation.dragSourceOpacity,\n    node: dragOverlay.nodeRef.current,\n    transform: (_attributesSnapshot$c = attributesSnapshot.current) == null ? void 0 : _attributesSnapshot$c.transform\n  });\n  const shouldRender = Boolean(finalChildren && (children || dropAnimation && !dropAnimationComplete));\n  useEffect(() => {\n    if ((active == null ? void 0 : active.id) !== prevActiveId.current) {\n      var _active$id2;\n\n      prevActiveId.current = (_active$id2 = active == null ? void 0 : active.id) != null ? _active$id2 : null;\n    }\n\n    if (active && attributesSnapshot.current !== attributes) {\n      attributesSnapshot.current = attributes;\n    }\n  }, [active, attributes]);\n  useEffect(() => {\n    if (dropAnimationComplete) {\n      attributesSnapshot.current = undefined;\n    }\n  }, [dropAnimationComplete]);\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  return React.createElement(wrapperElement, { ...otherAttributes,\n    ref: dragOverlay.setRef\n  }, finalChildren);\n});\n\nexport { AutoScrollActivator, DndContext, DragOverlay, KeyboardCode, KeyboardSensor, MeasuringFrequency, MeasuringStrategy, MouseSensor, PointerSensor, TouchSensor, TraversalOrder, applyModifiers, closestCenter, closestCorners, defaultAnnouncements, defaultCoordinates, defaultDropAnimation, getBoundingClientRect, getLayoutRect, getScrollableAncestors, getViewRect, getViewportLayoutRect, rectIntersection, useDndContext, useDndMonitor, useDraggable, useDroppable, useSensor, useSensors };\n//# sourceMappingURL=core.esm.js.map\n","import { isTouchEvent, hasViewportRelativeCoordinates, getEventCoordinates } from '@dnd-kit/utilities';\n\nfunction createSnapModifier(gridSize) {\n  return ({\n    transform\n  }) => ({ ...transform,\n    x: Math.ceil(transform.x / gridSize) * gridSize,\n    y: Math.ceil(transform.y / gridSize) * gridSize\n  });\n}\n\nconst restrictToHorizontalAxis = ({\n  transform\n}) => {\n  return { ...transform,\n    y: 0\n  };\n};\n\nfunction restrictToBoundingRect(transform, rect, boundingRect) {\n  const value = { ...transform\n  };\n\n  if (rect.top + transform.y <= boundingRect.top) {\n    value.y = boundingRect.top - rect.top;\n  } else if (rect.bottom + transform.y >= boundingRect.top + boundingRect.height) {\n    value.y = boundingRect.top + boundingRect.height - rect.bottom;\n  }\n\n  if (rect.left + transform.x <= boundingRect.left) {\n    value.x = boundingRect.left - rect.left;\n  } else if (rect.right + transform.x >= boundingRect.left + boundingRect.width) {\n    value.x = boundingRect.left + boundingRect.width - rect.right;\n  }\n\n  return value;\n}\n\nconst restrictToParentElement = ({\n  transform,\n  activeNodeRect,\n  containerNodeRect\n}) => {\n  if (!activeNodeRect || !containerNodeRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, activeNodeRect, containerNodeRect);\n};\n\nconst restrictToFirstScrollableAncestor = ({\n  transform,\n  activeNodeRect,\n  scrollableAncestorRects\n}) => {\n  const firstScrollableAncestorRect = scrollableAncestorRects[0];\n\n  if (!activeNodeRect || !firstScrollableAncestorRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, activeNodeRect, firstScrollableAncestorRect);\n};\n\nconst restrictToVerticalAxis = ({\n  transform\n}) => {\n  return { ...transform,\n    x: 0\n  };\n};\n\nconst restrictToWindowEdges = ({\n  transform,\n  activeNodeRect,\n  windowRect\n}) => {\n  if (!activeNodeRect || !windowRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, activeNodeRect, windowRect);\n};\n\nconst snapCenterToCursor = ({\n  activatorEvent,\n  activeNodeRect,\n  transform\n}) => {\n  if (activeNodeRect && activatorEvent && (isTouchEvent(activatorEvent) || hasViewportRelativeCoordinates(activatorEvent))) {\n    const activatorCoordinates = getEventCoordinates(activatorEvent);\n    const offsetX = activatorCoordinates.x - activeNodeRect.left;\n    const offsetY = activatorCoordinates.y - activeNodeRect.top;\n    return { ...transform,\n      x: transform.x + offsetX - activeNodeRect.width / 2,\n      y: transform.y + offsetY - activeNodeRect.height / 2\n    };\n  }\n\n  return transform;\n};\n\nexport { createSnapModifier, restrictToFirstScrollableAncestor, restrictToHorizontalAxis, restrictToParentElement, restrictToVerticalAxis, restrictToWindowEdges, snapCenterToCursor };\n//# sourceMappingURL=modifiers.esm.js.map\n","import React, { useMemo, useRef, useEffect, useState, useContext } from 'react';\nimport { useDndContext, getBoundingClientRect, useDroppable, useDraggable, getViewRect, closestCorners, getScrollableAncestors, KeyboardCode } from '@dnd-kit/core';\nimport { useUniqueId, useIsomorphicLayoutEffect, CSS, useCombinedRefs } from '@dnd-kit/utilities';\n\n/**\r\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\r\n */\nfunction arrayMove(array, from, to) {\n  const newArray = array.slice();\n  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\n  return newArray;\n}\n\nfunction getSortedRects(items, layoutRects) {\n  return items.reduce((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n\nfunction isValidIndex(index) {\n  return index !== null && index >= 0;\n}\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1\n};\nconst horizontalListSortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index\n}) => {\n  var _layoutRects$activeIn;\n\n  const activeNodeRect = (_layoutRects$activeIn = layoutRects[activeIndex]) != null ? _layoutRects$activeIn : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x: activeIndex < overIndex ? newIndexRect.offsetLeft + newIndexRect.width - (activeNodeRect.offsetLeft + activeNodeRect.width) : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale\n  };\n};\n\nfunction getItemGap(layoutRects, index, activeIndex) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!currentRect || !previousRect && !nextRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width) : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width) : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n\nconst rectSortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\nconst rectSwappingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\n// To-do: We should be calculating scale transformation\nconst defaultScale$1 = {\n  scaleX: 1,\n  scaleY: 1\n};\nconst verticalListSortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex\n}) => {\n  var _layoutRects$activeIn;\n\n  const activeNodeRect = (_layoutRects$activeIn = layoutRects[activeIndex]) != null ? _layoutRects$activeIn : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y: activeIndex < overIndex ? overIndexRect.offsetTop + overIndexRect.height - (activeNodeRect.offsetTop + activeNodeRect.height) : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale$1\n    };\n  }\n\n  const itemGap = getItemGap$1(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale$1\n  };\n};\n\nfunction getItemGap$1(layoutRects, index, activeIndex) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height) : nextRect ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height) : 0;\n  }\n\n  return nextRect ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height) : previousRect ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height) : 0;\n}\n\nconst ID_PREFIX = 'Sortable';\nconst Context = /*#__PURE__*/React.createContext({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasDragging: {\n    current: false\n  }\n});\nfunction SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy\n}) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(() => userDefinedItems.map(item => typeof item === 'string' ? item : item.id), [userDefinedItems]);\n  const isDragging = active != null;\n  const wasDragging = useRef(false);\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const isSorting = activeIndex !== -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      wasDragging.current = isDragging;\n    }, 100);\n    return () => clearTimeout(timeoutId);\n  }, [isDragging]);\n  const contextValue = useMemo(() => ({\n    activeIndex,\n    containerId,\n    disableTransforms,\n    items,\n    overIndex,\n    useDragOverlay,\n    sortedRects,\n    strategy,\n    wasDragging\n  }), [activeIndex, containerId, disableTransforms, items, overIndex, sortedRects, useDragOverlay, strategy, wasDragging]);\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nfunction isEqual(arr1, arr2) {\n  return arr1.join() === arr2.join();\n}\n\nconst defaultAnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\nconst defaultTransition = {\n  duration: 200,\n  easing: 'ease'\n};\nconst transitionProperty = 'transform';\nconst disabledTransition = /*#__PURE__*/CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear'\n});\nconst defaultAttributes = {\n  roleDescription: 'sortable'\n};\n\n/*\r\n * When the index of an item changes while sorting,\r\n * we need to temporarily disable the transforms\r\n */\n\nfunction useDerivedTransform({\n  disabled,\n  index,\n  node,\n  rect\n}) {\n  const [derivedTransform, setDerivedtransform] = useState(null);\n  const previousIndex = useRef(index);\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n  return derivedTransform;\n}\n\nfunction useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition\n}) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasDragging\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(() => ({\n    sortable: {\n      containerId,\n      index,\n      items\n    },\n    ...customData\n  }), [containerId, customData, index, items]);\n  const {\n    rect,\n    node,\n    setNodeRef: setDroppableNodeRef\n  } = useDroppable({\n    id,\n    data\n  });\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform\n  } = useDraggable({\n    id,\n    data,\n    attributes: { ...defaultAttributes,\n      ...userDefinedAttributes\n    },\n    disabled\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem = isSorting && wasDragging.current && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy != null ? localStrategy : globalStrategy;\n  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({\n    layoutRects: sortedRects,\n    activeNodeRect,\n    activeIndex,\n    overIndex,\n    index\n  }) : null;\n  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? arrayMove(items, activeIndex, overIndex).indexOf(id) : index;\n  const prevItems = useRef(items);\n  const itemsHaveChanged = items !== prevItems.current;\n  const prevNewIndex = useRef(newIndex);\n  const previousContainerId = useRef(containerId);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    previousItems: prevItems.current,\n    previousContainerId: previousContainerId.current,\n    transition,\n    wasDragging: wasDragging.current\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect\n  });\n  useEffect(() => {\n    if (isSorting && prevNewIndex.current !== newIndex) {\n      prevNewIndex.current = newIndex;\n    }\n\n    if (containerId !== previousContainerId.current) {\n      previousContainerId.current = containerId;\n    }\n\n    if (items !== prevItems.current) {\n      prevItems.current = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform != null ? derivedTransform : finalTransform,\n    transition: getTransition()\n  };\n\n  function getTransition() {\n    if ( // Temporarily disable transitions for a single frame to set up derived transforms\n    derivedTransform || // Or to prevent items jumping to back to their \"new\" position when items change\n    itemsHaveChanged && prevNewIndex.current === index) {\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({ ...transition,\n        property: transitionProperty\n      });\n    }\n\n    return undefined;\n  }\n}\n\nconst directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];\nconst sortableKeyboardCoordinates = (event, {\n  context: {\n    active,\n    droppableContainers,\n    translatedRect,\n    scrollableAncestors\n  }\n}) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !translatedRect) {\n      return;\n    }\n\n    const filteredContainers = [];\n    droppableContainers.getEnabled().forEach(entry => {\n      if (!entry || (entry == null ? void 0 : entry.disabled)) {\n        return;\n      }\n\n      const node = entry == null ? void 0 : entry.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n      const container = { ...entry,\n        rect: {\n          current: rect\n        }\n      };\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            filteredContainers.push(container);\n          }\n\n          break;\n\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            filteredContainers.push(container);\n          }\n\n          break;\n\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            filteredContainers.push(container);\n          }\n\n          break;\n\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            filteredContainers.push(container);\n          }\n\n          break;\n      }\n    });\n    const closestId = closestCorners({\n      active,\n      collisionRect: translatedRect,\n      droppableContainers: filteredContainers\n    });\n\n    if (closestId) {\n      var _droppableContainers$;\n\n      const newNode = (_droppableContainers$ = droppableContainers.get(closestId)) == null ? void 0 : _droppableContainers$.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index) => scrollableAncestors[index] !== element);\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors ? {\n          x: 0,\n          y: 0\n        } : {\n          x: translatedRect.width - newRect.width,\n          y: translatedRect.height - newRect.height\n        };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y\n        };\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nexport { SortableContext, arrayMove, defaultAnimateLayoutChanges, horizontalListSortingStrategy, rectSortingStrategy, rectSwappingStrategy, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy };\n//# sourceMappingURL=sortable.esm.js.map\n","import { useMemo, useLayoutEffect, useEffect, useRef, useCallback } from 'react';\n\nfunction useCombinedRefs(...refs) {\n  return useMemo(() => node => {\n    refs.forEach(ref => ref(node));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  refs);\n}\n\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nconst canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\r\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\r\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\r\n */\n\nconst useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\n\nfunction useInterval() {\n  const intervalRef = useRef(null);\n  const set = useCallback((listener, duration) => {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n  const clear = useCallback(() => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n  return [set, clear];\n}\n\nfunction useLazyMemo(callback, dependencies) {\n  const valueRef = useRef();\n  return useMemo(() => {\n    const newValue = callback(valueRef.current);\n    valueRef.current = newValue;\n    return newValue;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [...dependencies]);\n}\n\nfunction useNodeRef() {\n  const node = useRef(null);\n  const setNodeRef = useCallback(element => {\n    node.current = element;\n  }, []);\n  return [node, setNodeRef];\n}\n\nlet ids = {};\nfunction useUniqueId(prefix, value) {\n  return useMemo(() => {\n    if (value) {\n      return value;\n    }\n\n    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n    return `${prefix}-${id}`;\n  }, [prefix, value]);\n}\n\nfunction createAdjustmentFn(modifier) {\n  return (object, ...adjustments) => {\n    return adjustments.reduce((accumulator, adjustment) => {\n      const entries = Object.entries(adjustment);\n\n      for (const [key, valueAdjustment] of entries) {\n        const value = accumulator[key];\n\n        if (value != null) {\n          accumulator[key] = value + modifier * valueAdjustment;\n        }\n      }\n\n      return accumulator;\n    }, { ...object\n    });\n  };\n}\n\nconst add = /*#__PURE__*/createAdjustmentFn(1);\nconst subtract = /*#__PURE__*/createAdjustmentFn(-1);\n\nfunction hasViewportRelativeCoordinates(event) {\n  return 'clientX' in event && 'clientY' in event;\n}\n\nfunction isTouchEvent(event) {\n  var _window;\n\n  return ((_window = window) == null ? void 0 : _window.TouchEvent) && event instanceof TouchEvent;\n}\n\n/**\r\n * Returns the normalized x and y coordinates for mouse and touch events.\r\n */\n\nfunction getEventCoordinates(event) {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {\n        clientX: x,\n        clientY: y\n      } = event.touches[0];\n      return {\n        x,\n        y\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {\n        clientX: x,\n        clientY: y\n      } = event.changedTouches[0];\n      return {\n        x,\n        y\n      };\n    }\n  }\n\n  if (hasViewportRelativeCoordinates(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nconst CSS = /*#__PURE__*/Object.freeze({\n  Translate: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      const {\n        x,\n        y\n      } = transform;\n      return `translate3d(${x ? Math.round(x) : 0}px, ${y ? Math.round(y) : 0}px, 0)`;\n    }\n\n  },\n  Scale: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      const {\n        scaleX,\n        scaleY\n      } = transform;\n      return `scaleX(${scaleX}) scaleY(${scaleY})`;\n    }\n\n  },\n  Transform: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');\n    }\n\n  },\n  Transition: {\n    toString({\n      property,\n      duration,\n      easing\n    }) {\n      return `${property} ${duration}ms ${easing}`;\n    }\n\n  }\n});\n\nexport { CSS, add, canUseDOM, getEventCoordinates, hasViewportRelativeCoordinates, isTouchEvent, subtract, useCombinedRefs, useInterval, useIsomorphicLayoutEffect, useLazyMemo, useNodeRef, useUniqueId };\n//# sourceMappingURL=utilities.esm.js.map\n","import {\n\tuseBlockProps,\n\tInnerBlocks,\n\tInspectorControls,\n} from '@wordpress/block-editor';\nimport { PanelBody, RangeControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport './editor.scss';\n\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { columns } = attributes;\n\n\tconst onChangeColumns = ( newColumns ) => {\n\t\tsetAttributes( { columns: newColumns } );\n\t};\n\treturn (\n\t\t<div\n\t\t\t{ ...useBlockProps( {\n\t\t\t\tclassName: `has-${ columns }-columns`,\n\t\t\t} ) }\n\t\t>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Columns', 'team-members' ) }\n\t\t\t\t\t\tmin={ 1 }\n\t\t\t\t\t\tmax={ 6 }\n\t\t\t\t\t\tonChange={ onChangeColumns }\n\t\t\t\t\t\tvalue={ columns }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<InnerBlocks\n\t\t\t\tallowedBlocks={ [ 'blocks-course/team-member' ] }\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\ttemplate={ [\n\t\t\t\t\t[ 'blocks-course/team-member' ],\n\t\t\t\t\t[ 'blocks-course/team-member' ],\n\t\t\t\t\t[ 'blocks-course/team-member' ],\n\t\t\t\t] }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import { registerBlockType, createBlock } from '@wordpress/blocks';\nimport './team-member';\nimport './style.scss';\nimport Edit from './edit';\nimport save from './save';\n\nregisterBlockType( 'blocks-course/team-members', {\n\tedit: Edit,\n\tsave,\n\ttransforms: {\n\t\tfrom: [\n\t\t\t{\n\t\t\t\ttype: 'block',\n\t\t\t\tblocks: [ 'core/gallery' ],\n\t\t\t\ttransform: ( { images, columns } ) => {\n\t\t\t\t\tconst innerBlocks = images.map( ( { url, id, alt } ) => {\n\t\t\t\t\t\treturn createBlock( 'blocks-course/team-member', {\n\t\t\t\t\t\t\talt,\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\treturn createBlock(\n\t\t\t\t\t\t'blocks-course/team-members',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolumns: columns || 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinnerBlocks\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'block',\n\t\t\t\tblocks: [ 'core/image' ],\n\t\t\t\tisMultiBlock: true,\n\t\t\t\ttransform: ( attributes ) => {\n\t\t\t\t\tconst innerBlocks = attributes.map(\n\t\t\t\t\t\t( { url, id, alt } ) => {\n\t\t\t\t\t\t\treturn createBlock( 'blocks-course/team-member', {\n\t\t\t\t\t\t\t\talt,\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn createBlock(\n\t\t\t\t\t\t'blocks-course/team-members',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolumns:\n\t\t\t\t\t\t\t\tattributes.length > 3 ? 3 : attributes.length,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinnerBlocks\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n} );\n","import { useBlockProps, InnerBlocks } from '@wordpress/block-editor';\n\nexport default function save( { attributes } ) {\n\tconst { columns } = attributes;\n\treturn (\n\t\t<div\n\t\t\t{ ...useBlockProps.save( {\n\t\t\t\tclassName: `has-${ columns }-columns`,\n\t\t\t} ) }\n\t\t>\n\t\t\t<InnerBlocks.Content />\n\t\t</div>\n\t);\n}\n","import { useEffect, useState, useRef } from '@wordpress/element';\nimport {\n\tuseBlockProps,\n\tRichText,\n\tMediaPlaceholder,\n\tBlockControls,\n\tMediaReplaceFlow,\n\tInspectorControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { __ } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\nimport { usePrevious } from '@wordpress/compose';\nimport { isBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport {\n\tSpinner,\n\twithNotices,\n\tToolbarButton,\n\tPanelBody,\n\tTextareaControl,\n\tSelectControl,\n\tIcon,\n\tTooltip,\n\tTextControl,\n\tButton,\n} from '@wordpress/components';\nimport {\n\tDndContext,\n\tuseSensor,\n\tuseSensors,\n\tPointerSensor,\n} from '@dnd-kit/core';\nimport {\n\tSortableContext,\n\thorizontalListSortingStrategy,\n\tarrayMove,\n} from '@dnd-kit/sortable';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport SortableItem from './sortable-item';\n\nfunction Edit( {\n\tattributes,\n\tsetAttributes,\n\tnoticeOperations,\n\tnoticeUI,\n\tisSelected,\n} ) {\n\tconst { name, bio, url, alt, id, socialLinks } = attributes;\n\tconst [ blobURL, setBlobURL ] = useState();\n\tconst [ selectedLink, setSelectedLink ] = useState();\n\n\tconst prevURL = usePrevious( url );\n\tconst prevIsSelected = usePrevious( isSelected );\n\n\tconst sensors = useSensors(\n\t\tuseSensor( PointerSensor, {\n\t\t\tactivationConstraint: { distance: 5 },\n\t\t} )\n\t);\n\n\tconst titleRef = useRef();\n\n\tconst imageObject = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getMedia } = select( 'core' );\n\t\t\treturn id ? getMedia( id ) : null;\n\t\t},\n\t\t[ id ]\n\t);\n\n\tconst imageSizes = useSelect( ( select ) => {\n\t\treturn select( blockEditorStore ).getSettings().imageSizes;\n\t}, [] );\n\n\tconst getImageSizeOptions = () => {\n\t\tif ( ! imageObject ) return [];\n\t\tconst options = [];\n\t\tconst sizes = imageObject.media_details.sizes;\n\t\tfor ( const key in sizes ) {\n\t\t\tconst size = sizes[ key ];\n\t\t\tconst imageSize = imageSizes.find( ( s ) => s.slug === key );\n\t\t\tif ( imageSize ) {\n\t\t\t\toptions.push( {\n\t\t\t\t\tlabel: imageSize.name,\n\t\t\t\t\tvalue: size.source_url,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t};\n\n\tconst onChangeName = ( newName ) => {\n\t\tsetAttributes( { name: newName } );\n\t};\n\tconst onChangeBio = ( newBio ) => {\n\t\tsetAttributes( { bio: newBio } );\n\t};\n\tconst onChangeAlt = ( newAlt ) => {\n\t\tsetAttributes( { alt: newAlt } );\n\t};\n\tconst onSelectImage = ( image ) => {\n\t\tif ( ! image || ! image.url ) {\n\t\t\tsetAttributes( { url: undefined, id: undefined, alt: '' } );\n\t\t\treturn;\n\t\t}\n\t\tsetAttributes( { url: image.url, id: image.id, alt: image.alt } );\n\t};\n\tconst onSelectURL = ( newURL ) => {\n\t\tsetAttributes( {\n\t\t\turl: newURL,\n\t\t\tid: undefined,\n\t\t\talt: '',\n\t\t} );\n\t};\n\tconst onChangeImageSize = ( newURL ) => {\n\t\tsetAttributes( { url: newURL } );\n\t};\n\tconst onUploadError = ( message ) => {\n\t\tnoticeOperations.removeAllNotices();\n\t\tnoticeOperations.createErrorNotice( message );\n\t};\n\n\tconst removeImage = () => {\n\t\tsetAttributes( {\n\t\t\turl: undefined,\n\t\t\talt: '',\n\t\t\tid: undefined,\n\t\t} );\n\t};\n\n\tconst addNewSocialItem = () => {\n\t\tsetAttributes( {\n\t\t\tsocialLinks: [ ...socialLinks, { icon: 'wordpress', link: '' } ],\n\t\t} );\n\t\tsetSelectedLink( socialLinks.length );\n\t};\n\n\tconst updateSocialItem = ( type, value ) => {\n\t\tconst socialLinksCopy = [ ...socialLinks ];\n\t\tsocialLinksCopy[ selectedLink ][ type ] = value;\n\t\tsetAttributes( { socialLinks: socialLinksCopy } );\n\t};\n\n\tconst removeSocialItem = () => {\n\t\tsetAttributes( {\n\t\t\tsocialLinks: [\n\t\t\t\t...socialLinks.slice( 0, selectedLink ),\n\t\t\t\t...socialLinks.slice( selectedLink + 1 ),\n\t\t\t],\n\t\t} );\n\t\tsetSelectedLink();\n\t};\n\n\tconst handleDragEnd = ( event ) => {\n\t\tconst { active, over } = event;\n\t\tif ( active && over && active.id !== over.id ) {\n\t\t\tconst oldIndex = socialLinks.findIndex(\n\t\t\t\t( i ) => active.id === `${ i.icon }-${ i.link }`\n\t\t\t);\n\t\t\tconst newIndex = socialLinks.findIndex(\n\t\t\t\t( i ) => over.id === `${ i.icon }-${ i.link }`\n\t\t\t);\n\t\t\tsetAttributes( {\n\t\t\t\tsocialLinks: arrayMove( socialLinks, oldIndex, newIndex ),\n\t\t\t} );\n\t\t\tsetSelectedLink( newIndex );\n\t\t}\n\t};\n\n\tuseEffect( () => {\n\t\tif ( ! id && isBlobURL( url ) ) {\n\t\t\tsetAttributes( {\n\t\t\t\turl: undefined,\n\t\t\t\talt: '',\n\t\t\t} );\n\t\t}\n\t}, [] );\n\n\tuseEffect( () => {\n\t\tif ( isBlobURL( url ) ) {\n\t\t\tsetBlobURL( url );\n\t\t} else {\n\t\t\trevokeBlobURL( blobURL );\n\t\t\tsetBlobURL();\n\t\t}\n\t}, [ url ] );\n\n\tuseEffect( () => {\n\t\tif ( url && ! prevURL && isSelected ) {\n\t\t\ttitleRef.current.focus();\n\t\t}\n\t}, [ url, prevURL ] );\n\n\tuseEffect( () => {\n\t\tif ( prevIsSelected && ! isSelected ) {\n\t\t\tsetSelectedLink();\n\t\t}\n\t}, [ isSelected, prevIsSelected ] );\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Image Settings', 'team-members' ) }>\n\t\t\t\t\t{ id && (\n\t\t\t\t\t\t<SelectControl\n\t\t\t\t\t\t\tlabel={ __( 'Image Size', 'team-members' ) }\n\t\t\t\t\t\t\toptions={ getImageSizeOptions() }\n\t\t\t\t\t\t\tvalue={ url }\n\t\t\t\t\t\t\tonChange={ onChangeImageSize }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t\t{ url && ! isBlobURL( url ) && (\n\t\t\t\t\t\t<TextareaControl\n\t\t\t\t\t\t\tlabel={ __( 'Alt Text', 'team-members' ) }\n\t\t\t\t\t\t\tvalue={ alt }\n\t\t\t\t\t\t\tonChange={ onChangeAlt }\n\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t\"Alternative text describes your image to people can't see it. Add a short description with its key details.\",\n\t\t\t\t\t\t\t\t'team-members'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t{ url && (\n\t\t\t\t<BlockControls group=\"inline\">\n\t\t\t\t\t<MediaReplaceFlow\n\t\t\t\t\t\tname={ __( 'Replace Image', 'team-members' ) }\n\t\t\t\t\t\tonSelect={ onSelectImage }\n\t\t\t\t\t\tonSelectURL={ onSelectURL }\n\t\t\t\t\t\tonError={ onUploadError }\n\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\tallowedTypes={ [ 'image' ] }\n\t\t\t\t\t\tmediaId={ id }\n\t\t\t\t\t\tmediaURL={ url }\n\t\t\t\t\t/>\n\t\t\t\t\t<ToolbarButton onClick={ removeImage }>\n\t\t\t\t\t\t{ __( 'Remove Image', 'team-members' ) }\n\t\t\t\t\t</ToolbarButton>\n\t\t\t\t</BlockControls>\n\t\t\t) }\n\t\t\t<div { ...useBlockProps() }>\n\t\t\t\t{ url && (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={ `wp-block-blocks-course-team-member-img${\n\t\t\t\t\t\t\tisBlobURL( url ) ? ' is-loading' : ''\n\t\t\t\t\t\t}` }\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={ url } alt={ alt } />\n\t\t\t\t\t\t{ isBlobURL( url ) && <Spinner /> }\n\t\t\t\t\t</div>\n\t\t\t\t) }\n\t\t\t\t<MediaPlaceholder\n\t\t\t\t\ticon=\"admin-users\"\n\t\t\t\t\tonSelect={ onSelectImage }\n\t\t\t\t\tonSelectURL={ onSelectURL }\n\t\t\t\t\tonError={ onUploadError }\n\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\tallowedTypes={ [ 'image' ] }\n\t\t\t\t\tdisableMediaButtons={ url }\n\t\t\t\t\tnotices={ noticeUI }\n\t\t\t\t/>\n\t\t\t\t<RichText\n\t\t\t\t\tref={ titleRef }\n\t\t\t\t\tplaceholder={ __( 'Member Name', 'team-member' ) }\n\t\t\t\t\ttagName=\"h4\"\n\t\t\t\t\tonChange={ onChangeName }\n\t\t\t\t\tvalue={ name }\n\t\t\t\t\tallowedFormats={ [] }\n\t\t\t\t/>\n\t\t\t\t<RichText\n\t\t\t\t\tplaceholder={ __( 'Member Bio', 'team-member' ) }\n\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\tonChange={ onChangeBio }\n\t\t\t\t\tvalue={ bio }\n\t\t\t\t\tallowedFormats={ [] }\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"wp-block-blocks-course-team-member-social-links\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<DndContext\n\t\t\t\t\t\t\tsensors={ sensors }\n\t\t\t\t\t\t\tonDragEnd={ handleDragEnd }\n\t\t\t\t\t\t\tmodifiers={ [ restrictToHorizontalAxis ] }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<SortableContext\n\t\t\t\t\t\t\t\titems={ socialLinks.map(\n\t\t\t\t\t\t\t\t\t( item ) => `${ item.icon }-${ item.link }`\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tstrategy={ horizontalListSortingStrategy }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{ socialLinks.map( ( item, index ) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<SortableItem\n\t\t\t\t\t\t\t\t\t\t\tkey={ `${ item.icon }-${ item.link }` }\n\t\t\t\t\t\t\t\t\t\t\tid={ `${ item.icon }-${ item.link }` }\n\t\t\t\t\t\t\t\t\t\t\tindex={ index }\n\t\t\t\t\t\t\t\t\t\t\tselectedLink={ selectedLink }\n\t\t\t\t\t\t\t\t\t\t\tsetSelectedLink={ setSelectedLink }\n\t\t\t\t\t\t\t\t\t\t\ticon={ item.icon }\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} ) }\n\t\t\t\t\t\t\t</SortableContext>\n\t\t\t\t\t\t</DndContext>\n\n\t\t\t\t\t\t{ isSelected && (\n\t\t\t\t\t\t\t<li className=\"wp-block-blocks-course-team-member-add-icon-li\">\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\ttext={ __(\n\t\t\t\t\t\t\t\t\t\t'Add Social Link',\n\t\t\t\t\t\t\t\t\t\t'team-members'\n\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\taria-label={ __(\n\t\t\t\t\t\t\t\t\t\t\t'Add Social Link',\n\t\t\t\t\t\t\t\t\t\t\t'team-members'\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\tonClick={ addNewSocialItem }\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Icon icon=\"plus\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t{ selectedLink !== undefined && (\n\t\t\t\t\t<div className=\"wp-block-blocks-course-team-member-link-form\">\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'Icon', 'text-members' ) }\n\t\t\t\t\t\t\tvalue={ socialLinks[ selectedLink ].icon }\n\t\t\t\t\t\t\tonChange={ ( icon ) => {\n\t\t\t\t\t\t\t\tupdateSocialItem( 'icon', icon );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'URL', 'text-members' ) }\n\t\t\t\t\t\t\tvalue={ socialLinks[ selectedLink ].link }\n\t\t\t\t\t\t\tonChange={ ( link ) => {\n\t\t\t\t\t\t\t\tupdateSocialItem( 'link', link );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button isDestructive onClick={ removeSocialItem }>\n\t\t\t\t\t\t\t{ __( 'Remove Link', 'text-members' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default withNotices( Edit );\n","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport Edit from './edit';\nimport Save from './save';\n\nregisterBlockType( 'blocks-course/team-member', {\n\ttitle: __( 'Team Member', 'team-members' ),\n\tdescription: __( 'A team member item', 'team-members' ),\n\ticon: 'admin-users',\n\tparent: [ 'blocks-course/team-members' ],\n\tsupports: {\n\t\treusable: false,\n\t\thtml: false,\n\t},\n\tattributes: {\n\t\tname: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'h4',\n\t\t},\n\t\tbio: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'p',\n\t\t},\n\t\tid: {\n\t\t\ttype: 'number',\n\t\t},\n\t\talt: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'attribute',\n\t\t\tselector: 'img',\n\t\t\tattribute: 'alt',\n\t\t\tdefault: '',\n\t\t},\n\t\turl: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'attribute',\n\t\t\tselector: 'img',\n\t\t\tattribute: 'src',\n\t\t},\n\t\tsocialLinks: {\n\t\t\ttype: 'array',\n\t\t\tdefault: [],\n\t\t\tsource: 'query',\n\t\t\tselector: '.wp-block-blocks-course-team-member-social-links ul li',\n\t\t\tquery: {\n\t\t\t\ticon: {\n\t\t\t\t\tsource: 'attribute',\n\t\t\t\t\tattribute: 'data-icon',\n\t\t\t\t},\n\t\t\t\tlink: {\n\t\t\t\t\tsource: 'attribute',\n\t\t\t\t\tselector: 'a',\n\t\t\t\t\tattribute: 'href',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tedit: Edit,\n\tsave: Save,\n} );\n","import { useBlockProps, RichText } from '@wordpress/block-editor';\nimport { Icon } from '@wordpress/components';\n\nexport default function Save( { attributes } ) {\n\tconst { name, bio, url, alt, id, socialLinks } = attributes;\n\treturn (\n\t\t<div { ...useBlockProps.save() }>\n\t\t\t{ url && (\n\t\t\t\t<img\n\t\t\t\t\tsrc={ url }\n\t\t\t\t\talt={ alt }\n\t\t\t\t\tclassName={ id ? `wp-image-${ id }` : null }\n\t\t\t\t/>\n\t\t\t) }\n\t\t\t{ name && <RichText.Content tagName=\"h4\" value={ name } /> }\n\t\t\t{ bio && <RichText.Content tagName=\"p\" value={ bio } /> }\n\t\t\t{ socialLinks.length > 0 && (\n\t\t\t\t<div className=\"wp-block-blocks-course-team-member-social-links\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{ socialLinks.map( ( item, index ) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={ index } data-icon={ item.icon }>\n\t\t\t\t\t\t\t\t\t<a href={ item.link }>\n\t\t\t\t\t\t\t\t\t\t<Icon icon={ item.icon } />\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} ) }\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t) }\n\t\t</div>\n\t);\n}\n","import { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Icon } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nexport default function SortableItem( props ) {\n\tconst {\n\t\tattributes,\n\t\tlisteners,\n\t\tsetNodeRef,\n\t\ttransform,\n\t\ttransition,\n\t} = useSortable( { id: props.id } );\n\n\tconst style = {\n\t\ttransform: CSS.Transform.toString( transform ),\n\t\ttransition,\n\t};\n\treturn (\n\t\t<li\n\t\t\tref={ setNodeRef }\n\t\t\tstyle={ style }\n\t\t\t{ ...attributes }\n\t\t\t{ ...listeners }\n\t\t\tclassName={\n\t\t\t\tprops.selectedLink === props.index ? 'is-selected' : null\n\t\t\t}\n\t\t>\n\t\t\t<button\n\t\t\t\taria-label={ __( 'Edit Social Link', 'team-members' ) }\n\t\t\t\tonClick={ () => props.setSelectedLink( props.index ) }\n\t\t\t>\n\t\t\t\t<Icon icon={ props.icon } />\n\t\t\t</button>\n\t\t</li>\n\t);\n}\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"ReactDOM\"];","module.exports = window[\"wp\"][\"blob\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"compose\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"index\": 0,\n\t\"style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkboilerplate\"] = self[\"webpackChunkboilerplate\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"style-index\"], function() { return __webpack_require__(\"./src/index.js\"); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["useBlockProps","InnerBlocks","InspectorControls","PanelBody","RangeControl","__","Edit","attributes","setAttributes","columns","onChangeColumns","newColumns","className","registerBlockType","createBlock","save","edit","transforms","from","type","blocks","transform","images","innerBlocks","map","url","id","alt","isMultiBlock","length","useEffect","useState","useRef","RichText","MediaPlaceholder","BlockControls","MediaReplaceFlow","store","blockEditorStore","useSelect","usePrevious","isBlobURL","revokeBlobURL","Spinner","withNotices","ToolbarButton","TextareaControl","SelectControl","Icon","Tooltip","TextControl","Button","DndContext","useSensor","useSensors","PointerSensor","SortableContext","horizontalListSortingStrategy","arrayMove","restrictToHorizontalAxis","SortableItem","noticeOperations","noticeUI","isSelected","name","bio","socialLinks","blobURL","setBlobURL","selectedLink","setSelectedLink","prevURL","prevIsSelected","sensors","activationConstraint","distance","titleRef","imageObject","select","getMedia","imageSizes","getSettings","getImageSizeOptions","options","sizes","media_details","key","size","imageSize","find","s","slug","push","label","value","source_url","onChangeName","newName","onChangeBio","newBio","onChangeAlt","newAlt","onSelectImage","image","undefined","onSelectURL","newURL","onChangeImageSize","onUploadError","message","removeAllNotices","createErrorNotice","removeImage","addNewSocialItem","icon","link","updateSocialItem","socialLinksCopy","removeSocialItem","slice","handleDragEnd","event","active","over","oldIndex","findIndex","i","newIndex","current","focus","item","index","Save","title","description","parent","supports","reusable","html","source","selector","attribute","default","query","useSortable","CSS","props","listeners","setNodeRef","transition","style","Transform","toString"],"sourceRoot":""}